@page "/Users/edit"
@inject CrudBlazor.Data.AppDbContext DB
@using CrudBlazor.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Editar</PageTitle>

<h1>Editar usuário</h1>

<h4>Modifique os campos necessários abaixo:</h4>
<hr />
@if (Users is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Users" OnValidSubmit="UpdateUsers" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Users.Id" value="@Users.Id" />
                <div class="mb-3">
                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="Users.Nome" class="form-control" />
                    <ValidationMessage For="() => Users.Nome" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idade" class="form-label">Idade:</label>
                    <InputText id="idade" @bind-Value="Users.Idade" class="form-control" />
                    <ValidationMessage For="() => Users.Idade" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cpf" class="form-label">CPF:</label>
                    <InputText id="cpf" @bind-Value="Users.CPF" class="form-control" />
                    <ValidationMessage For="() => Users.CPF" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="endereco" class="form-label">Endereco:</label>
                    <InputText id="endereco" @bind-Value="Users.Endereco" class="form-control" />
                    <ValidationMessage For="() => Users.Endereco" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cep" class="form-label">CEP:</label>
                    <InputText id="cep" @bind-Value="Users.CEP" class="form-control" />
                    <ValidationMessage For="() => Users.CEP" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cidade" class="form-label">Cidade:</label>
                    <InputText id="cidade" @bind-Value="Users.Cidade" class="form-control" />
                    <ValidationMessage For="() => Users.Cidade" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="estado" class="form-label">Estado:</label>
                    <InputText id="estado" @bind-Value="Users.Estado" class="form-control" />
                    <ValidationMessage For="() => Users.Estado" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Salvar alteração</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/users">Voltar para lista</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Users? Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Users ??= await DB.Usuarios.FirstOrDefaultAsync(m => m.Id == Id);

        if (Users is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateUsers()
    {
        DB.Attach(Users!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UsersExists(Users!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    bool UsersExists(int id)
    {
        return DB.Usuarios.Any(e => e.Id == id);
    }
}
